//
//  MainViewController.swift
//  MySampleApp
//
//
// Copyright 2017 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.18
//

import UIKit
import RxSwift
import AWSDynamoDB
import AWSMobileHubHelper

class MainViewController: UIViewController  {
    // MARK: - variables/constants
    var mainBeerStore: BeerStore {
        let navController = self.navigationController as? NavigationController
        return navController!.mainBeerStore
    }
    var alertTextField = UITextField()
    var filterAllBeers: Variable<[Beer]> = Variable([])
    var tableViewBeers: Variable<[Beer]> = Variable([])
    var currentBeer: Beer!
    var currentBeerIndexPath: IndexPath!
    var refreshControl: UIRefreshControl!
    var pickerQuantity = "1"
    
    // MARK: Outlets
    @IBOutlet var tableView: UITableView!
    
    
    @IBOutlet var settingsButton: UIBarButtonItem!
    
    // MARK: Actions
    
    
    // MARK: - Initializers
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
    }
    
    //MARK: View Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        navigationController?.isNavigationBarHidden = false
        // tableview
        tableView.delegate = self
        tableView.dataSource = self
        // status bar
        let statusBarView = UIView(frame: UIApplication.shared.statusBarFrame)
        statusBarView.backgroundColor = UIColor(red: 235/255, green: 171/255, blue: 28/255, alpha: 1)
        // search results tableview
        self.searchDisplayController!.searchResultsTableView.backgroundColor = UIColor(colorLiteralRed: 240/255, green: 198/255, blue: 0/255, alpha: 1.0)
        self.searchDisplayController!.searchResultsTableView.separatorStyle = UITableViewCellSeparatorStyle.none
        // search bar
        self.searchDisplayController?.searchBar.isTranslucent = false
        self.searchDisplayController?.searchBar.isHidden = false
        let searchbarBackground = UIView()
        searchbarBackground.backgroundColor = UIColor(red: 235/255, green: 171/255, blue: 28/255, alpha: 1)
        tableView.backgroundView = searchbarBackground
//        settingsButton.action = #selector(settingsButtonClicked)
//        settingsButton.target = self
        
    }
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        navigationController?.setToolbarHidden(true, animated: true)
        self.navigationController?.navigationBar.titleTextAttributes = [NSForegroundColorAttributeName: UIColor.white, NSFontAttributeName: UIFont(name: "blippo", size: 20)!]
        self.navigationController?.topViewController?.title = "BEERVENTORY"
        print("MainViewController will appear")
        tableView.reloadData()
    }
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
    }
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        mainBeerStore.saveChanges()
    }
    
    //MARK: Imperative methods
    func handleCancel(alertView: UIAlertAction!) {
        // do cancel stuff here
    }
    func filterContentForSearchText(searchText: String) {
        // Filter the array using the filter method
        if self.mainBeerStore.allBeers.value == [] {
            self.filterAllBeers.value = []
            return
        }
        self.filterAllBeers.value = self.mainBeerStore.allBeers.value.filter({( beer: Beer) -> Bool in
            // to start, let's just search by name
            return beer.name.lowercased().range(of: searchText.lowercased()) != nil
        })
        print(filterAllBeers.value)
    }
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if(segue.identifier == "detailsViewController") {
            let yourNextViewController = (segue.destination as! DetailsController)
            yourNextViewController.beer = currentBeer
        }
    }
//    func settingsButtonClicked() {
//        let alertController = UIAlertController(title: "Sorrey", message: "Feature not implemented", preferredStyle: UIAlertControllerStyle.alert)
//        alertController.addAction(UIAlertAction(title: "Dismiss", style: UIAlertActionStyle.default,handler: nil))
//        self.present(alertController, animated: true, completion: nil)
//    }
    func checkButtonTapped(sender:AnyObject) {
        let buttonPosition = sender.convert(CGPoint.zero, to: self.tableView)
        let indexPath = self.tableView.indexPathForRow(at: buttonPosition)
        currentBeerIndexPath = indexPath!
    }
    func configureTextField(alertTextField: UITextField?) {
        if let textField = alertTextField {
            textField.placeholder = "Enter quantity"
            textField.text = "1"
            textField.keyboardType = UIKeyboardType.numberPad
            self.alertTextField = textField
        }
    }
    func updateBeerQuantity(indexPath: IndexPath){
        tableViewBeers.value[indexPath.row] = currentBeer
        self.mainBeerStore.updateBeerQuantity(updatedBeer: self.currentBeer)
        self.mainBeerStore.saveChanges()
        self.searchDisplayController!.searchResultsTableView.reloadData()
        tableView.reloadData()
    }
    func removeBeerFromStore(indexPath: IndexPath) {
        tableViewBeers.value[indexPath.row] = currentBeer
        self.mainBeerStore.removeBeer(beer: self.currentBeer)
        self.mainBeerStore.saveChanges()
        self.searchDisplayController!.searchResultsTableView.reloadData()
        tableView.reloadData()
    }
    func showPickerInActionSheet(sender: AnyObject) {
        pickerQuantity = "1"
        checkButtonTapped(sender: sender)
        print(tableViewBeers.value)
        print(currentBeerIndexPath.row)
        currentBeer = tableViewBeers.value[currentBeerIndexPath.row]
        var actionType: String
        var actionTitle: String
        if sender.tag == 1 {
            actionType = "add"
            actionTitle = "Add"
        } else {
            actionType = "remove"
            actionTitle = "Remove"
        }
        print("\(actionTitle) \(currentBeer.name)")
        var title = "\(actionTitle) \(currentBeer.name)"
        var message = "Enter quantity of beers to \(actionType)\n\n\n\n\n\n\n\n\n\n"
        var alert = UIAlertController(title: title, message: message, preferredStyle: UIAlertControllerStyle.actionSheet)
        alert.isModalInPopover = true
        //Create a frame (placeholder/wrapper) for the picker and then create the picker
        var pickerFrame: CGRect = CGRect(x: 17, y: 52, width: 270, height: 160); // CGRectMake(left), top, width, height) - left and top are like margins
        var picker: UIPickerView = UIPickerView(frame: pickerFrame);
        //set the pickers datasource and delegate
        picker.delegate = self
        picker.dataSource = self
        //Add the picker to the alert controller
        alert.view.addSubview(picker)
        //add buttons to the view
        var buttonCancelFrame: CGRect = CGRect(x: 0, y: 200, width: 100, height: 30) //size & position of the button as placed on the toolView
        //Create the cancel button & set its title
        var buttonCancel: UIButton = UIButton(frame: buttonCancelFrame)
        buttonCancel.setTitle("Cancel", for: UIControlState.normal)
        buttonCancel.setTitleColor(UIColor(red: 200/255, green: 147/255, blue: 49/255, alpha: 1), for: UIControlState.normal)
        //Add the target - target, function to call, the event witch will trigger the function call
        buttonCancel.addTarget(self, action: #selector(cancelSelection), for: UIControlEvents.touchDown)
        //add buttons to the view
        var buttonOkFrame: CGRect = CGRect(x: 170, y:  200, width: 100, height: 30); //size & position of the button as placed on the toolView
        //Create the Select button & set the title
        var buttonOk: UIButton = UIButton(frame: buttonOkFrame)
        if sender.tag == 1 {
            buttonOk.addTarget(self, action: #selector(addBeers), for: UIControlEvents.touchDown);
            buttonOk.setTitle("Add", for: UIControlState.normal);
            buttonOk.setTitleColor(UIColor(red: 200/255, green: 147/255, blue: 49/255, alpha: 1), for: UIControlState.normal)
        } else {
            buttonOk.addTarget(self, action: #selector(removeBeers), for: UIControlEvents.touchDown);
            buttonOk.setTitle("Remove", for: UIControlState.normal);
            buttonOk.setTitleColor(UIColor(red: 200/255, green: 147/255, blue: 49/255, alpha: 1), for: UIControlState.normal)
        }
        alert.view.addSubview(buttonOk)
        alert.view.addSubview(buttonCancel)
        self.present(alert, animated: true, completion: nil);
    }
    func addBeers(sender: UIButton){
        guard let quantity = Int(pickerQuantity) else {
            // handle bad no value or text entry
            return
        }
        self.currentBeer.quantity += quantity
        self.updateBeerQuantity(indexPath: currentBeerIndexPath)
        self.dismiss(animated: true, completion: nil)
    }
    
    func removeBeers(sender: UIButton){
        guard let quantity = Int(pickerQuantity) else {
            // handle bad no value or text entry
            return
        }
        var removedBeer = false
        self.currentBeer.quantity -= quantity
        if currentBeer.quantity < 1 {
            self.removeBeerFromStore(indexPath: self.currentBeerIndexPath)
            removedBeer = true
        } else {
            self.updateBeerQuantity(indexPath: currentBeerIndexPath)
        }
        self.dismiss(animated: true, completion: {
            if removedBeer {
                let alertController2 = UIAlertController(title: "\(self.currentBeer.name) removed", message: "You drank all of your \(self.currentBeer.name). Go get some more!", preferredStyle: UIAlertControllerStyle.alert)
                alertController2.addAction(UIAlertAction(title: "Dismiss", style: UIAlertActionStyle.default,handler: nil))
                self.present(alertController2, animated: true, completion: nil)
            }
        })
    }
    
    func cancelSelection(sender: UIButton){
        print("Cancel");
        self.dismiss(animated: true, completion: nil);
        // We dismiss the alert. Here you can add your additional code to execute when cancel is pressed
    }
    
    func insertData(beer: Beer) {
        let objectMapper = AWSDynamoDBObjectMapper.default()
        let itemToCreate: AWSBeer = AWSBeer()
        itemToCreate._userId = AWSIdentityManager.default().identityId!
        itemToCreate._beerEntryId = beer.brewerydb_id
        itemToCreate._beer = beer.beerObjectMap()
        objectMapper.save(itemToCreate, completionHandler: {(error: Error?) -> Void in
            if let error = error {
                print("Amazon DynamoDB Save Error: \(error)")
                return
            }
            print("Item saved.")
        })
    }
    
}

// MARK: - UIPicker delegate
extension MainViewController: UIPickerViewDelegate {
    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
        pickerQuantity = String(row + 1)
    }
}

// MARK: - UIPicker delegate
extension MainViewController: UIPickerViewDataSource {
    func numberOfComponents(in pickerView: UIPickerView) -> Int {
        return 1
    }
    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        return 30
    }
    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
        print(row)
        return String(row + 1)
    }
}

// MARK: - tableView data source
extension MainViewController: UITableViewDataSource {
    //    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
    //        // not implemented
    //    }
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if tableView == self.searchDisplayController!.searchResultsTableView {
            return self.filterAllBeers.value.count
        } else {
            return mainBeerStore.allBeers.value.count // add 1 here if want the No More Beers thing
        }
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        self.tableView.estimatedRowHeight = 135
        if tableView == self.searchDisplayController!.searchResultsTableView {
            print("DS search results tableview")
            tableViewBeers = self.filterAllBeers
        } else {
            tableViewBeers = self.mainBeerStore.allBeers
            print("DS main tableview")
        }
        // handle all beers
        if indexPath.row < mainBeerStore.allBeers.value.count {
            let cell = self.tableView!.dequeueReusableCell(withIdentifier: "MainBeerTableCell", for: indexPath) as! MainBeerTableCell
            let beer = tableViewBeers.value[indexPath.row]
            // cell details
            cell.beerNameLabel.text = beer.name
            cell.beerStyle.text = beer.style_name
            cell.breweryNameLabel.text = beer.brewery_name
            cell.abvLabel.text = "\(beer.abv)%"
            cell.beerQuantity.text = String(beer.quantity)
            cell.addBeerButton.tag = 1
            cell.removeBeerButton.tag = 2
            cell.addBeerButton.addTarget(self, action: #selector(showPickerInActionSheet), for: .touchUpInside)
            cell.removeBeerButton.addTarget(self, action: #selector(showPickerInActionSheet), for: .touchUpInside)
            return cell
        } else {
            let cell = self.tableView!.dequeueReusableCell(withIdentifier: "MainLastCell", for: indexPath) as! MainLastCell
            cell.lastCellLabel.text = "🍻 No more Beers! 🍻"
            return cell
        }
    }
}


// MARK: - tableView delegate
extension MainViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 0.0
    }
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 135.0
    }
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if tableView == self.searchDisplayController!.searchResultsTableView {
            currentBeer = filterAllBeers.value[indexPath.row]
        } else {
            currentBeer = mainBeerStore.allBeers.value[indexPath.row]
        }
        tableView.deselectRow(at: indexPath, animated: true)
        self.performSegue(withIdentifier: "detailsViewController", sender: self)
    }
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        if let myCell = cell as? MainBeerTableCell {
            // cell formatting
            myCell.mainBackground.layer.cornerRadius = 8
            //myCell.mainBackground.layer.masksToBounds = true
            myCell.totalBackground.layer.cornerRadius = 8
            //myCell.totalBackground.layer.masksToBounds = true
            myCell.shadowLayer.layer.masksToBounds = false
            myCell.shadowLayer.layer.shadowOffset = CGSize.zero
            myCell.shadowLayer.layer.shadowColor = UIColor.black.cgColor
            myCell.shadowLayer.layer.shadowOpacity = 0.5
            myCell.shadowLayer.layer.shadowRadius = 2
            myCell.shadowLayer.layer.shadowPath = UIBezierPath(roundedRect: myCell.shadowLayer.bounds, byRoundingCorners: .allCorners, cornerRadii: CGSize(width: 8, height: 8)).cgPath
            myCell.shadowLayer.layer.shouldRasterize = false
            myCell.shadowLayer.layer.rasterizationScale = UIScreen.main.scale
        }
    }
}

extension MainViewController: UISearchBarDelegate{
    
}

extension MainViewController: UISearchDisplayDelegate {
    func searchDisplayController(_ controller: UISearchDisplayController!, shouldReloadTableForSearch searchString: String!) -> Bool {
        print("text changed")
        self.filterContentForSearchText(searchText: searchString)
        return true
    }
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        tableViewBeers = self.mainBeerStore.allBeers
    }
}

