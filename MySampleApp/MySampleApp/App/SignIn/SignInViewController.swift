//
//  SignInViewController.swift
//  MySampleApp
//
//
// Copyright 2017 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.18
//
//

import UIKit
import AWSMobileHubHelper
import FBSDKLoginKit
import AWSFacebookSignIn
import GoogleSignIn
import AWSGoogleSignIn

let backgroundImageColor =  UIColor(red: 235/255, green: 171/255, blue: 28/255, alpha: 1)

class SignInViewController : UIViewController {
    
    @IBOutlet weak var logoView: UIImageView!
    @IBOutlet weak var facebookButton: UIButton!
    @IBOutlet weak var googleButton: UIButton!
    
    @IBOutlet weak var logoViewHeight: NSLayoutConstraint!
    @IBOutlet weak var orSignInWithLabel: UILabel!
    
    var didCompleteSignIn: ((_ success: Bool) -> Void)? = nil
    var passwordAuthenticationCompletion: AWSTaskCompletionSource<AnyObject>?

    
    override func viewDidLoad() {
        super.viewDidLoad()
        // set up the navigation controller
        self.setUpNavigationController()
        // set up facebook button if enabled
        self.setUpFacebookButton()
        // set up google button if enabled
        self.setUpGoogleButton()
    }

    func setUpFacebookButton() {
        AWSFacebookSignInProvider.sharedInstance().setPermissions(["public_profile"])
        // Facebook UI Setup
        let facebookComponent = AWSFacebookSignInButton(frame: CGRect(x: 0, y: 0, width: facebookButton.frame.size.width, height: facebookButton.frame.size.height))
        facebookComponent.buttonStyle = .large // use the large button style
        facebookComponent.delegate = self // set delegate to respond to user actions
        facebookButton.addSubview(facebookComponent)
    }
    
    func setUpGoogleButton() {
        AWSGoogleSignInProvider.sharedInstance().setScopes(["profile", "openid"])
        // Google UI Setup
        let googleComponent = AWSGoogleSignInButton(frame: CGRect(x: 0, y: 0, width: googleButton.frame.size.width, height: googleButton.frame.size.height))
        googleComponent.buttonStyle = .large // use the large button style
        googleComponent.delegate = self // set delegate to respond to user actions
        AWSGoogleSignInProvider.sharedInstance().setViewControllerForGoogleSignIn(self)
        googleButton.addSubview(googleComponent)
        view.addConstraint(NSLayoutConstraint(item: googleButton, attribute: .top, relatedBy: .equal, toItem: anchorViewForGoogle(), attribute: .bottom, multiplier: 1, constant: 8.0))
    }
    
    func setUpNavigationController() {
        // set up title bar
        self.navigationController?.navigationBar.topItem?.title = "Sign In"
    }
    

    func handleLoginWithSignInProvider(_ signInProvider: AWSSignInProvider) {
        AWSSignInManager.sharedInstance().login(signInProviderKey: signInProvider.identityProviderName, completionHandler: {(result: Any?, authState: AWSIdentityManagerAuthState, error: Error?) in
            print("result = \(result), error = \(error)")
            // If no error reported by SignInProvider, discard the sign-in view controller.
            if error == nil {
                DispatchQueue.main.async(execute: {
                    self.dismiss(animated: true, completion: nil)
                    if let didCompleteSignIn = self.didCompleteSignIn {
                        didCompleteSignIn(true)
                    }
                })   
                return
            }
            self.showErrorDialog(signInProvider.identityProviderName, withError: error as! NSError)
        })
    }
    
    func showErrorDialog(_ loginProviderName: String, withError error: NSError) {
        print("\(loginProviderName) failed to sign in w/ error: \(error)")
        let alertController = UIAlertController(title: NSLocalizedString("Sign-in Provider Sign-In Error", comment: "Sign-in error for sign-in failure."), message: NSLocalizedString("\(loginProviderName) failed to sign in w/ error: \(error)", comment: "Sign-in message structure for sign-in failure."), preferredStyle: .alert)
        let doneAction = UIAlertAction(title: NSLocalizedString("Ok", comment: "Label to cancel sign-in failure."), style: .cancel, handler: nil)
        alertController.addAction(doneAction)
        present(alertController, animated: true, completion: nil)
    }
    
    
    func anchorViewForGoogle() -> UIView {
        return facebookButton
    }
    
}

extension SignInViewController: AWSSignInDelegate {
    // delegate handler for facebook / google sign in.
    func onLogin(signInProvider: AWSSignInProvider, result: Any?, authState: AWSIdentityManagerAuthState, error: Error?) {
        // dismiss view controller if no error
        if error == nil {
            print("Signed in with: \(signInProvider)")
            self.presentingViewController?.dismiss(animated: true, completion: nil)
            if let didCompleteSignIn = self.didCompleteSignIn {
                didCompleteSignIn(true)
            }
            return
        }
        self.showErrorDialog(signInProvider.identityProviderName, withError: error as! NSError)
    }
}
